/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package showclixscanner.gui;

import java.util.concurrent.CountDownLatch;
import showclixscanner.Browser;
import showclixscanner.Email;
import showclixscanner.ProcessHandler;
import showclixscanner.ShowclixScanner;

/**
 *
 * @author SunnyBat
 */
public class Status extends javax.swing.JFrame {

  /**
   * Creates new form Status
   */
  public Status() {
    initComponents();
    customComponents();
    setVisible(true);
  }

  private void customComponents() {
    setTitle("ShowclixScanner v" + ShowclixScanner.VERSION);
    if (showclixscanner.NetworkHandler.connectionsAvailable() || !ShowclixScanner.shouldReserveTickets()) {
      setNetworkConnectionButtonState(false);
    }
    jButton5.setVisible(false);
  }

  public void println(final String text) {
    javax.swing.SwingUtilities.invokeLater(new Runnable() {
      @Override
      public void run() {
        jTextArea1.append(text + "\n");
        jTextArea1.setCaretPosition(jTextArea1.getText().length());
      }
    });
  }

  public void clearConsole() {
    javax.swing.SwingUtilities.invokeLater(new Runnable() {
      @Override
      public void run() {
        jTextArea1.setText("");
      }
    });
  }

  public String getConsoleOutputLevel() {
    return "Minimum";
  }

  public void setRefreshTime(final int time) {
    javax.swing.SwingUtilities.invokeLater(new Runnable() {
      @Override
      public void run() {
        setRefreshTime("Checking in " + time + " seconds");
      }
    });
  }

  public void setRefreshTime(final String text) {
    javax.swing.SwingUtilities.invokeLater(new Runnable() {
      @Override
      public void run() {
        jLabelRefreshingIn.setText(text);
      }
    });
  }

  public void setDataUsed(final double MB, final int times, final int failTimes) {
    javax.swing.SwingUtilities.invokeLater(new Runnable() {
      @Override
      public void run() {
        jLabelDataUsed.setText("Data used: " + MB + "MB (" + times + " successes, " + failTimes + " fails)");
      }
    });
  }

  public void setTicketsFound(final String ticketsFound) {
    javax.swing.SwingUtilities.invokeLater(new Runnable() {
      @Override
      public void run() {
        jLabelTicketsFound.setText("Tickets Found: " + ticketsFound);
      }
    });
  }

  public void setNetworkConnectionButtonState(final boolean enabled) {
    if (ShowclixScanner.shouldReserveTickets()) {
      javax.swing.SwingUtilities.invokeLater(new Runnable() {
        @Override
        public void run() {
          jButton4.setEnabled(enabled);
        }
      });
    } else {
      System.out.println("DEBUG: setNetworkConnectionButtonState called when it shouldn't be!");
      javax.swing.SwingUtilities.invokeLater(new Runnable() {
        @Override
        public void run() {
          jButton4.setEnabled(false);
        }
      });
    }
  }

  public void setForceKillFirefoxButtonVisible(final boolean visible) {
    javax.swing.SwingUtilities.invokeLater(new Runnable() {
      @Override
      public void run() {
        jButton5.setVisible(visible);
      }
    });
  }

  public void setForceKillFirefoxButtonText(final String text) {
    javax.swing.SwingUtilities.invokeLater(new Runnable() {
      @Override
      public void run() {
        jButton5.setText(text);
      }
    });
  }

  @Override
  public void dispose() {
    ShowclixScanner.terminateProgram();
    super.dispose();
  }

  /**
   * This method is called from within the constructor to initialize the form. WARNING: Do NOT modify this code. The content of this method is always
   * regenerated by the Form Editor.
   */
  @SuppressWarnings("unchecked")
  // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
  private void initComponents() {

    jLabel1 = new javax.swing.JLabel();
    jLabelRefreshingIn = new javax.swing.JLabel();
    jLabelDataUsed = new javax.swing.JLabel();
    jLabelTicketsFound = new javax.swing.JLabel();
    jSpinner1 = new javax.swing.JSpinner();
    jLabelConsoleOutput = new javax.swing.JLabel();
    jButton1 = new javax.swing.JButton();
    jButton2 = new javax.swing.JButton();
    consoleOutEnclosurePanel = new javax.swing.JPanel();
    jScrollPane1 = new javax.swing.JScrollPane();
    jTextArea1 = new javax.swing.JTextArea();
    jLabel9 = new javax.swing.JLabel();
    jButton3 = new javax.swing.JButton();
    jButton4 = new javax.swing.JButton();
    jButton5 = new javax.swing.JButton();

    setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
    setTitle("Showclix Monitor");

    jLabel1.setFont(new java.awt.Font("Tahoma", 0, 36)); // NOI18N
    jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
    jLabel1.setText("Showclix Monitor");

    jLabelRefreshingIn.setText("Refreshing In X Seconds");

    jLabelDataUsed.setText("Data Used: ");

    jLabelTicketsFound.setText("Tickets Found:");

    jSpinner1.setModel(new javax.swing.SpinnerListModel(ShowclixScanner.LOGTYPE.values()));
    ((javax.swing.JSpinner.DefaultEditor) jSpinner1.getEditor()).getTextField().setEditable(false);
    jSpinner1.addChangeListener(new javax.swing.event.ChangeListener() {
      public void stateChanged(javax.swing.event.ChangeEvent evt) {
        jSpinner1StateChanged(evt);
      }
    });
    jSpinner1.addPropertyChangeListener(new java.beans.PropertyChangeListener() {
      public void propertyChange(java.beans.PropertyChangeEvent evt) {
        jSpinner1PropertyChange(evt);
      }
    });

    jLabelConsoleOutput.setText("Console Output: ");

    jButton1.setText("Send Test Text");
    jButton1.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        jButton1ActionPerformed(evt);
      }
    });

    jButton2.setText("Hide Console");
    jButton2.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        jButton2ActionPerformed(evt);
      }
    });

    jTextArea1.setEditable(false);
    jTextArea1.setColumns(20);
    jTextArea1.setLineWrap(true);
    jTextArea1.setRows(5);
    jTextArea1.setWrapStyleWord(true);
    jScrollPane1.setViewportView(jTextArea1);

    jLabel9.setFont(new java.awt.Font("Tahoma", 2, 10)); // NOI18N
    jLabel9.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
    jLabel9.setText("Console Out:");

    javax.swing.GroupLayout consoleOutEnclosurePanelLayout = new javax.swing.GroupLayout(consoleOutEnclosurePanel);
    consoleOutEnclosurePanel.setLayout(consoleOutEnclosurePanelLayout);
    consoleOutEnclosurePanelLayout.setHorizontalGroup(
      consoleOutEnclosurePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
      .addComponent(jLabel9, javax.swing.GroupLayout.DEFAULT_SIZE, 485, Short.MAX_VALUE)
      .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.TRAILING)
    );
    consoleOutEnclosurePanelLayout.setVerticalGroup(
      consoleOutEnclosurePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
      .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, consoleOutEnclosurePanelLayout.createSequentialGroup()
        .addComponent(jLabel9)
        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 326, javax.swing.GroupLayout.PREFERRED_SIZE))
    );

    jButton3.setText("Print Throwables");
    jButton3.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        jButton3ActionPerformed(evt);
      }
    });

    jButton4.setText("Listen on Port 9243");
    jButton4.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        jButton4ActionPerformed(evt);
      }
    });

    jButton5.setText("Force Kill Firefox");
    jButton5.setToolTipText("<html>\nWARNING:<br>\nThis may cause the Firefox cookies database<br>\nto become unstable or corrupt.<br>\nUSE WITH CAUTION!\n</html>");
    jButton5.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        jButton5ActionPerformed(evt);
      }
    });

    javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
    getContentPane().setLayout(layout);
    layout.setHorizontalGroup(
      layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
      .addGroup(layout.createSequentialGroup()
        .addContainerGap()
        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
          .addComponent(consoleOutEnclosurePanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
          .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, 485, Short.MAX_VALUE)
          .addComponent(jLabelRefreshingIn, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
          .addGroup(layout.createSequentialGroup()
            .addComponent(jButton3)
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
            .addComponent(jButton4)
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
            .addComponent(jButton1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
          .addGroup(layout.createSequentialGroup()
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
              .addComponent(jLabelDataUsed)
              .addComponent(jLabelTicketsFound))
            .addGap(0, 0, Short.MAX_VALUE))
          .addGroup(layout.createSequentialGroup()
            .addComponent(jLabelConsoleOutput)
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
            .addComponent(jSpinner1, javax.swing.GroupLayout.PREFERRED_SIZE, 131, javax.swing.GroupLayout.PREFERRED_SIZE)
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
            .addComponent(jButton5, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
          .addComponent(jButton2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        .addContainerGap())
    );
    layout.setVerticalGroup(
      layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
      .addGroup(layout.createSequentialGroup()
        .addContainerGap()
        .addComponent(jLabel1)
        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
        .addComponent(jLabelRefreshingIn, javax.swing.GroupLayout.PREFERRED_SIZE, 14, javax.swing.GroupLayout.PREFERRED_SIZE)
        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
        .addComponent(jLabelDataUsed)
        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
        .addComponent(jLabelTicketsFound)
        .addGap(18, 18, 18)
        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
          .addComponent(jLabelConsoleOutput)
          .addComponent(jSpinner1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
          .addComponent(jButton5))
        .addGap(18, 18, 18)
        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
          .addComponent(jButton3)
          .addComponent(jButton4)
          .addComponent(jButton1))
        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
        .addComponent(consoleOutEnclosurePanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
        .addComponent(jButton2)
        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
    );

    pack();
  }// </editor-fold>//GEN-END:initComponents

  private void jSpinner1PropertyChange(java.beans.PropertyChangeEvent evt) {//GEN-FIRST:event_jSpinner1PropertyChange
    // TODO add your handling code here:
  }//GEN-LAST:event_jSpinner1PropertyChange

  private void jSpinner1StateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_jSpinner1StateChanged
    // TODO add your handling code here:
    ShowclixScanner.setPrintLevel((ShowclixScanner.LOGTYPE) ((javax.swing.JSpinner) (evt.getSource())).getValue());
  }//GEN-LAST:event_jSpinner1StateChanged

  private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
    // TODO add your handling code here:
    if (Email.sendMessage("Test Text", "Message successful!")) {
      jButton1.setText("Text successfully sent!");
    } else {
      jButton1.setText("Unable to send test text.");
    }
  }//GEN-LAST:event_jButton1ActionPerformed

  private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
    // TODO add your handling code here:
    if (consoleOutEnclosurePanel.isVisible()) {
      consoleOutEnclosurePanel.setVisible(false);
      jButton2.setText("Show Console");
    } else {
      consoleOutEnclosurePanel.setVisible(true);
      jButton2.setText("Hide Console");
    }
    pack();
  }//GEN-LAST:event_jButton2ActionPerformed

  private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
    // TODO add your handling code here:
    java.util.List<Throwable> list = ShowclixScanner.getThrowableList();
    java.util.Iterator<Throwable> iterate = list.iterator();
    StackTraceElement[] ste;
    String lineSeparator = System.getProperty("line.separator");
    String message = "";
    message += lineSeparator;
    while (iterate.hasNext()) {
      Throwable t = iterate.next();
      ste = t.getStackTrace();
      message += "---->" + t.getMessage() + lineSeparator;
      for (int a = 0; a < ste.length; a++) {
        message += "at ";
        message += ste[a];
        message += lineSeparator;
      }
    }
    message += lineSeparator;
    if (message.equals("" + lineSeparator + lineSeparator)) {
      message = "No Throwables found.";
    }
    ShowclixScanner.println(message, ShowclixScanner.LOGTYPE.MINIMUM);
  }//GEN-LAST:event_jButton3ActionPerformed

  private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed
    // TODO add your handling code here:
    ShowclixScanner.startNetworkConnection();
  }//GEN-LAST:event_jButton4ActionPerformed

  private void jButton5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton5ActionPerformed
    // TODO add your handling code here:
    if (ShowclixScanner.ticketsFound() && ShowclixScanner.shouldReserveTickets()) {
      ShowclixScanner.println("Feature not implemented yet.", ShowclixScanner.LOGTYPE.MINIMUM);
    } else {
      jButton5.setEnabled(false);
      ShowclixScanner.startBackgroundThread(new Runnable() {
        @Override
        public void run() {
          try {
            CountDownLatch countdown = new CountDownLatch(1);
            final ApproveForm approve = new ApproveForm(countdown);
            javax.swing.SwingUtilities.invokeLater(new Runnable() {
              @Override
              public void run() {
                approve.setHeader("Force Kill Firefox?");
                approve.setDescription("Do you really want to force kill Firefox? NOTE: DOING SO HAS A CHANCE TO CORRUPT THE FIREFOX COOKIES DATABASE. YOU MAY LOSE YOUR COOKIES BY DOING THIS. DO SO AT YOUR OWN RISK.");
                approve.setApproveButtonText("Force Kill Firefox");
                approve.setDisapproveButtonText("Let Firefox Close Normally");
                approve.setVisible(true);
              }
            });
            countdown.await(60, java.util.concurrent.TimeUnit.SECONDS);
            approve.dispose();
            if (approve.isApproved()) {
              ProcessHandler.forceKillFirefox();
              while (ProcessHandler.isProcessRunging("firefox.exe")) {
                try {
                  Thread.sleep(2500); // Just a shot in the dark on the time.
                } catch (InterruptedException interruptedException) {
                }
                if (ProcessHandler.isProcessRunging("firefox.exe")) {
                  ProcessHandler.forceKillFirefox();
                }
              }
              showclixscanner.DatabaseManager.deleteDatabaseLockFiles();
            } else {
              ShowclixScanner.println("Force kill Firefox cancelled.", ShowclixScanner.LOGTYPE.NOTES);
              javax.swing.SwingUtilities.invokeLater(new Runnable() {
                @Override
                public void run() {
                  jButton5.setEnabled(true);
                }
              });
            }
          } catch (Exception e) {
            e.printStackTrace();
          }
        }
      }, "Force Kill Firefox Thread");
    }
  }//GEN-LAST:event_jButton5ActionPerformed

  // Variables declaration - do not modify//GEN-BEGIN:variables
  private javax.swing.JPanel consoleOutEnclosurePanel;
  private javax.swing.JButton jButton1;
  private javax.swing.JButton jButton2;
  private javax.swing.JButton jButton3;
  private javax.swing.JButton jButton4;
  private javax.swing.JButton jButton5;
  private javax.swing.JLabel jLabel1;
  private javax.swing.JLabel jLabel9;
  private javax.swing.JLabel jLabelConsoleOutput;
  private javax.swing.JLabel jLabelDataUsed;
  private javax.swing.JLabel jLabelRefreshingIn;
  private javax.swing.JLabel jLabelTicketsFound;
  private javax.swing.JScrollPane jScrollPane1;
  private javax.swing.JSpinner jSpinner1;
  private javax.swing.JTextArea jTextArea1;
  // End of variables declaration//GEN-END:variables
}
